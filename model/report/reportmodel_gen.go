// Code generated by goctl. DO NOT EDIT.

package report

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reportFieldNames          = builder.RawFieldNames(&Report{})
	reportRows                = strings.Join(reportFieldNames, ",")
	reportRowsExpectAutoSet   = strings.Join(stringx.Remove(reportFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reportRowsWithPlaceHolder = strings.Join(stringx.Remove(reportFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	reportModel interface {
		Insert(ctx context.Context, data *Report) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Report, error)
		Update(ctx context.Context, data *Report) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReportModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Report struct {
		Id             int64     `db:"id"`
		Time           time.Time `db:"time"`
		TotalStartTime time.Time `db:"total_start_time"`
		Total          float64   `db:"total"`
		Yesterday      float64   `db:"yesterday"`
		Today          float64   `db:"today"`
		Period         int64     `db:"period"`
		Power          int64     `db:"power"`
		ApparentPower  int64     `db:"apparent_power"`
		ReactivePower  int64     `db:"reactive_power"`
		Factor         float64   `db:"factor"`
		Frequency      int64     `db:"frequency"`
		Voltage        int64     `db:"voltage"`
		Current        float64   `db:"current"`
	}
)

func newReportModel(conn sqlx.SqlConn) *defaultReportModel {
	return &defaultReportModel{
		conn:  conn,
		table: "`report`",
	}
}

func (m *defaultReportModel) withSession(session sqlx.Session) *defaultReportModel {
	return &defaultReportModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`report`",
	}
}

func (m *defaultReportModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultReportModel) FindOne(ctx context.Context, id int64) (*Report, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reportRows, m.table)
	var resp Report
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReportModel) Insert(ctx context.Context, data *Report) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, reportRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Time, data.TotalStartTime, data.Total, data.Yesterday, data.Today, data.Period, data.Power, data.ApparentPower, data.ReactivePower, data.Factor, data.Frequency, data.Voltage, data.Current)
	return ret, err
}

func (m *defaultReportModel) Update(ctx context.Context, data *Report) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, reportRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Time, data.TotalStartTime, data.Total, data.Yesterday, data.Today, data.Period, data.Power, data.ApparentPower, data.ReactivePower, data.Factor, data.Frequency, data.Voltage, data.Current, data.Id)
	return err
}

func (m *defaultReportModel) tableName() string {
	return m.table
}
